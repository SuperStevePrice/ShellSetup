#!/usr/bin/env python

import os
import sys
import shutil
import subprocess
from shutil import which
from datetime import datetime


# Define and initialize parameters dictionary
params = {
    "bg": "CadetBlue",
    "fg": "Black",
    "fn": "9x15bold",
    "cols": "80",
    "rows": "45",
    "sl": "200",
    "log": 'N',
    "cmd": 'N'
}

# Function to prompt user and return input
def prompt_user(prompt, default=None):
    default_text = f"[{default}]" if default else ""
    return input(f"{prompt:<30s} {default_text}: ") or default

# Function to launch xterm
def Xterm(params):
    success = 0
    xterm_path = "/opt/X11/bin/xterm"

    if os.path.exists(xterm_path):
        xterm_executable = xterm_path
        #print ("DEBUG0: xterm_path:", xterm_path);
        #print ("DEBUG0: xterm_executable:", xterm_executable);
        success = 1
    else:
        xterm_executable = shutil.which("xterm")
        if xterm_executable:
            success = 1
            #print ("DEBUG1: xterm_executable:", xterm_executable);
        else:
            #print ("DEBUG2: xterm_executable:", xterm_executable);
            sys.exit(1);

    # Format the title
    title = f"'{os.environ['USER']}@{os.environ['HOST']}{datetime.now()}'"

    # Determine the font parameter
    font_param = "-fa" if " " in params["fn"] else "-fn"
    font_value = f'"{params["fn"]}"' if font_param == "-fn" else params["fn"]

    # Format the xterm command
    cmd = f"xterm_executable -sb -sl {params['sl']} {font_param} {font_value} "
    cmd +=f"-geometry {params['cols']}x{params['rows']} -fg \"{params['fg']}\" "
    cmd += f"-bg \"{params['bg']}\" -title \"{title}\""
    cmd += " -l" if params['log'].lower() == 'y' else ""


    # Execute the xterm command in a separate process
    if success:
        # Extract the values from params dictionary
        background_color = params.get('background_color', 'CadetBlue')
        foreground_color = params.get('foreground_color', 'Black')
        font = params.get('font', '9x15bold')
        columns = params.get('columns', '80')
        rows = params.get('rows', '45')
        buffer_size = params.get('buffer_size', '200')
        title = f"'{os.environ['USER']}@{os.environ['HOST']}  {datetime.now()}'"

        # Create the cmd variable
        cmd = [
            str(xterm_executable),
            "-sb",
            "-sl", buffer_size,
            "-fn", font,
            "-geometry", f"{columns}x{rows}",
            "-fg", foreground_color,
            "-bg", background_color,
            "-title", title
        ]

        # Launch xterm using os.fork() and subprocess.Popen():
        pid = os.fork()
        if pid == 0:
            # Child process
            subprocess.Popen(cmd, shell=True)
            os._exit(0)  # Terminate the child process

        # Print cmd_log information
        print("xterm launched in the background.")
        write_cmd_log_file(cmd)
    else:
        # Handle xterm not found error
        print("xterm cannot be found")
        sys.exit(1)

# Prompt user for parameter values
def get_user_inputs():
    print()
    params['bg'] = prompt_user(
    "Pick a background color", params['bg'])
    params['fg'] = prompt_user(
    "Pick a foreground color", params['fg'])
    params['fn'] = prompt_user(
    "Enter the font", params['fn'])
    params['cols'] = prompt_user(
    "Enter the number of columns", params['cols'])
    params['rows'] = prompt_user(
    "Enter the number of rows", params['rows'])
    params['sl'] = prompt_user(
    "Enter the memory buffer size", params['sl'])
    params['log'] = prompt_user(
    "Enable keystroke logging? (Y/N)", params['log'])
    params['cmd'] = prompt_user(
    "Enable xterm logging? (Y/N)", params['cmd'])
    print()

# Function to write to the cmd_log file
def write_cmd_log_file(cmd):
    cmd_log_file = os.environ['HOME'] + "/Documents/xterm.log"

    print("See xterm commands in the cmd_log file:", cmd_log_file)

    print("DEBUG: Writing to cmd_log file")
    print("DEBUG: cmd:", cmd)
    print("DEBUG: cmd_log_file:", cmd_log_file)

    try:
        with open(cmd_log_file, "w") as file:
            if isinstance(cmd, str):
                file.write(cmd)
            elif isinstance(cmd, list):
                file.write("\n" + "\n".join(cmd) + "\n")
            else:
                raise ValueError("Invalid cmd type")
    except IOError:
        print("Failed to write to cmd_log file:", cmd_log_file)


# MAIN: Launch xterm
get_user_inputs()
Xterm(params)
